/* A simplified community detection algorithm:
 *
 * Skeleton code written by Jianzhong Qi, May 2023
 * Edited by: Trong Hieu Nguyen - 1325050
 *
 */

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define STAGE_NUM_ONE 1 /* stage numbers */
#define STAGE_NUM_TWO 2
#define STAGE_NUM_THREE 3
#define STAGE_NUM_FOUR 4
#define STAGE_HEADER "Stage %d\n==========\n" /* stage header format string */
#define MAX_USER_PROFILES 50
#define MAX_HASHTAGS 10
#define MAX_CHARS 41

typedef char data_t[MAX_CHARS];

typedef struct {
    /* add your user_t struct definition */
    int number, year_joined, num_hashtags;
    data_t hashtags[MAX_HASHTAGS];
} user_t;

/* linked list type definitions below, from
   https://people.eng.unimelb.edu.au/ammoffat/ppsaa/c/listops.c
*/
typedef struct node node_t;

struct node {
    data_t data;
    node_t *next;
};

typedef struct {
    node_t *head;
    node_t *foot;
} list_t;

/****************************************************************/

/* function prototypes */
list_t *make_empty_list(void);
void free_list(list_t *list);
void print_list(list_t *list);
list_t *insert_unique_in_order(list_t *list, data_t value);

void print_stage_header(int stage_num);

void stage_one();
void stage_two();
void stage_three();
void stage_four();

/* add your own function prototypes here */
double s_o_c();
int detect_communities();
void print_friends();
/****************************************************************/

/* main function controls all the action; modify if needed */
int main(int argc, char *argv[]) {
    /* add variables to hold the input data */
    user_t profiles[MAX_USER_PROFILES];
    int nprofiles = 0;
    /* stage 1: read user profiles */
    stage_one(profiles, &nprofiles);
    int fr_matrix[nprofiles][nprofiles];
    /* stage 2: compute the strength of connection between u0 and u1 */
    stage_two(nprofiles, fr_matrix);

    /* stage 3: compute the strength of connection for all user pairs */
    double soc_mat[nprofiles][nprofiles];
    stage_three(nprofiles, fr_matrix, soc_mat);

    /* stage 4: detect communities and topics of interest */
    stage_four(nprofiles, soc_mat, profiles);

    /* all done; take some rest */
    return 0;
}

/****************************************************************/

/* add your code below; you can also modify the function return type
   and parameter list
*/

/* stage 1: read user profiles */
void stage_one(user_t arr_profiles[], int *len_arr) {
    /* add code for stage 1 */
    /* print stage header */
    print_stage_header(STAGE_NUM_ONE);
    int i, year, max_hashtag = 0, max_user = 0, idx = 0;
    char c;

    // read user number and year joined
    while (scanf("u%d %d%c", &i, &year, &c) == 3) {
        arr_profiles[i].number = i;
        arr_profiles[i].year_joined = year;
        int curr_hashtag_num = 0;
        data_t curr_hashtag;
        // read hashtags while keeping track of user with largest hashtags
        while (c == ' ' && curr_hashtag_num < MAX_HASHTAGS &&
               scanf(" #%20s%c", curr_hashtag, &c) == 2) {
            strcpy(arr_profiles[i].hashtags[curr_hashtag_num], curr_hashtag);
            curr_hashtag_num++;
        }

        arr_profiles[i].num_hashtags = curr_hashtag_num;

        if (curr_hashtag_num > max_hashtag) {
            max_user = i;
            max_hashtag = curr_hashtag_num;
        }

        idx++;
        *len_arr += 1;
    }

    printf("Number of users: %d\n", *len_arr);
    printf("u%d has the largest number of hashtags:\n", max_user);

    for (int j = 0; j < max_hashtag; j++) {
        printf("#%s", arr_profiles[max_user].hashtags[j]);
        if (j < max_hashtag - 1) {
            printf(" ");
        }
    }
    printf("\n\n");
}

/* stage 2: compute the strength of connection between u0 and u1 */
void stage_two(int size, int friends_mat[][size]) {
    /* add code for stage 2 */
    /* print stage header */
    print_stage_header(STAGE_NUM_TWO);
    int row = 0, col = 0, next;

    while (row < size && scanf("%d", &next) == 1) {
        friends_mat[row][col] = next;
        col++;
        if (col == size) {
            row++;
            col = 0;
        }
    }

    printf("Strength of connection between u0 and u1: %4.2f\n",
           s_o_c(size, friends_mat, 0, 1));
    printf("\n");
}

// calculate strength of connection between user i and user j
double s_o_c(int size, int friends_mat[][size], int i, int j) {
    if (!friends_mat[i][j]) {
        return 0;
    }
    double set_union = 0, set_intersection = 0;

    for (int k = 0; k < size; k++) {
        if (friends_mat[i][k] && friends_mat[j][k]) {
            set_intersection++;
        }
        if (friends_mat[i][k] || friends_mat[j][k]) {
            set_union++;
        }
    }

    return set_intersection / set_union;
}

/* stage 3: compute the strength of connection for all user pairs */
void stage_three(int size, int friends_mat[][size], double soc_mat[][size]) {
    /* add code for stage 3 */
    /* print stage header */
    print_stage_header(STAGE_NUM_THREE);

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            soc_mat[i][j] = s_o_c(size, friends_mat, i, j);
            printf("%4.2f", soc_mat[i][j]);
            if (j < size - 1) {
                printf(" ");
            }
        }
        printf("\n");
    }
    printf("\n");
}

// stage 4.1 find out core users
int detect_communities(double arr[], int size, double ths, int thc) {
    int cfriends = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] > ths) {
            cfriends++;
        }
    }

    if (cfriends > thc) {
        return cfriends;
    }
    return 0;
}

// stage 4.1 print all close friends
void print_friends(int size, double soc_mat[][size], int cl_friends[],
                   int cl_friends_num, double ths, int idx) {
    printf("Stage 4.1. Core user: u%d; close friends: ", idx);
    int cnt = 0, arr_idx = 0;
    
    for (int i = 0; i < size && arr_idx < cl_friends_num; i++) {
        if (soc_mat[idx][i] > ths) {
            printf("u%d", i);
            cnt++;
            cl_friends[arr_idx] = i;
            arr_idx++;

            if (cnt < cl_friends_num - 1) {
                printf(" ");
            }
        }
    }

    cl_friends[cl_friends_num - 1] = idx;
    printf("\n");
}

/* stage 4: detect communities and topics of interest */
void stage_four(int size, double soc_mat[][size], user_t arr_profiles[]) {
    /* print stage header */
    print_stage_header(STAGE_NUM_FOUR);
    double ths;
    int thc;
    scanf("%lf %d", &ths, &thc);

    // iterate through all users' strength of connections to detect communities 
    for (int i = 0; i < size; i++) {
        int close_friends_num = detect_communities(soc_mat[i], size, ths, thc);

        // skip users who are not part of community
        if (!close_friends_num) {
            continue;
        }
        int close_friends[close_friends_num + 1];
        // stage 4.1 print core users and their close friends
        print_friends(size, soc_mat, close_friends, close_friends_num + 1, ths, i);
        printf("Stage 4.2. Hashtags:\n");
        list_t *shared_hashtags = make_empty_list();

        // iterate through all users in community
        for (int j = 0; j < close_friends_num + 1; j++) {
            int curr_user = close_friends[j];
            int hashtag_num = arr_profiles[curr_user].num_hashtags;
            
            // iterate through all hashtags of a user
            for (int k = 0; k < hashtag_num; k++) {
                data_t curr_hashtag;
                strcpy(curr_hashtag, arr_profiles[curr_user].hashtags[k]);
                
                // insert unique hashtag into list
                shared_hashtags = insert_unique_in_order(shared_hashtags, curr_hashtag);
            }
        }
        print_list(shared_hashtags);
        free_list(shared_hashtags);
        
    }
}


/****************************************************************/
/* functions provided, adapt them as appropriate */

/* print stage header given stage number */
void print_stage_header(int stage_num) { printf(STAGE_HEADER, stage_num); }

/****************************************************************/
/* linked list implementation below, adapted from
   https://people.eng.unimelb.edu.au/ammoffat/ppsaa/c/listops.c
*/

/* create an empty list */
list_t *make_empty_list(void) {
    list_t *list;

    list = (list_t *)malloc(sizeof(*list));
    assert(list != NULL);
    list->head = list->foot = NULL;

    return list;
}

/* free the memory allocated for a list (and its nodes) */
void free_list(list_t *list) {
    node_t *curr, *prev;

    assert(list != NULL);
    curr = list->head;

    while (curr) {
        prev = curr;
        curr = curr->next;
        free(prev);
    }

    free(list);
}

/* insert a new data element into a linked list, keeping the
        data elements in the list unique and in alphabetical order
*/
list_t *insert_unique_in_order(list_t *list, data_t value) {
    node_t *new;
    new = (node_t *)malloc(sizeof(*new));
    assert(list != NULL && new != NULL);
    strcpy(new->data, value);
    new->next = NULL;

    // first insertion into the list
    if (list->foot == NULL) {
        list->head = list->foot = new;
    } else {
        node_t *curr = list->head, *prev = NULL;

        // iterate through list until a word lexicographically greater than value is found
        while (curr && (strcmp(curr->data, value) < 0)) {
            prev = curr;
            curr = curr->next;
        }

        // stops if word is already in list
        if (curr && !strcmp(curr->data, value)){
            return list;
        }

        // insert at head of list
        if (prev == NULL) {
            new->next = list->head;
            list->head = new;
        } else { // insert in middle of list
            new->next = prev->next;
            prev->next = new;
            if (prev == list->foot) { // insert at end of list
                list->foot = new;
            }
        }
    }
    return list;
}

/* print the data contents of a list */
void print_list(list_t *list) {
    /* add code to print list */
    node_t *curr = list->head;
    int i = 0;

    while (curr) {
        if (i && !(i % 5)) {
            printf("\n");
        }
        printf("#%s", curr->data);

        if (curr->next && ((i + 1) % 5)) {
Instructor
| 06/12 at 1:32 pm
Grading comment:
magic number

            printf(" ");
        }
        curr = curr->next;
        i++;
    }
    printf("\n");
}

/****************************************************************/
/*
        Write your time complexity analysis below for Stage 4.2,
        assuming U users, C core users, H hashtags per user,
        and a maximum length of T characters per hashtag:
*/

// time complexity of iterating through every user's hashtags in every community,
// checking whether they're unique or not is O(C * U^2 * H^2 * T)

// time complexity of printing all the linked lists is O(C * U * H * T)

// => time complexity of stage 4.2 is O(C * (U^2) * (H^2) * T)
Instructor
| 06/12 at 1:32 pm
Grading comment:
nicely done

// since we drop the lower terms

// algorithms are fun
